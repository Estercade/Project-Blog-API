const { PrismaClient } = require("@prisma/client");
const prisma = new PrismaClient();

async function getAllUsers(query) {
  const users = await prisma.user.findMany({
    take: query.take,
    skip: query.skip,
    select: {
      id: true,
      username: true,
      email: true,
      _count: {
        select: {
          posts: true,
          comments: true,
        }
      },
      role: true,
    },
    orderBy: query.sort
  });
  return users;
}

async function getUserByUsername(query) {
  const user = await prisma.user.findUnique({
    where: {
      username: query.username
    },
    select: {
      id: true,
      username: true,
      _count: {
        select: {
          posts: true,
          comments: true,
        }
      },
      email: true,
      posts: {
        where: {
          published: true
        },
        select: {
          id: true,
          totalRating: true,
          title: true,
          content: true,
          published: true,
          publishedAt: true,
          lastEditedAt: true,
          author: {
            select: {
              id: true,
              username: true
            }
          },
          _count: {
            select: { comments: true },
          },
        }
      },
      comments: {
        select: {
          id: true,
          content: true,
          postedAt: true,
          lastEditedAt: true,
          author: {
            select: {
              id: true,
              username: true
            }
          },
          post: {
            select: {
              id: true,
              title: true,
            }
          },
        }
      },
    }
  });
  return user;
}

async function updateUser(query) {
  const match = await prisma.user.findUnique({
    where: {
      username: query.username,
    }
  })
  // if user by the given username is not found, return "null"
  if (!match) {
    return null;
  }
  // if username is being changed, check if the username is taken 
  if (query.newUsername && query.username !== query.newUsername) {
    const usernameCheck = await prisma.user.findUnique({
      where: {
        username: query.newUsername,
      }
    })
    if (usernameCheck) {
      return "taken";
    }
  }
  const user = await prisma.user.update({
    where: {
      username: query.username
    },
    data: {
      username: query.newUsername,
      password: query.password,
      email: query.email,
      role: query.role
    },
    select: {
      id: true,
      username: true,
      email: true,
      role: true
    }
  })
  return user;
}

async function deleteUser(query) {
  const user = await prisma.user.findUnique({
    where: {
      id: query.userId
    }
  })
  // if user by the given userId is not found, return "null"
  if (!user) {
    return null;
  }
  await prisma.comment.delete({
    where: {
      id: query.userId
    }
  });
  return "deleted";
}

async function getPostsByUsername(query) {
  const user = await prisma.user.findUnique({
    where: {
      username: query.username
    }
  })
  // if user by the given username is not found, return "null"
  if (!user) {
    return null;
  }
  const [{ posts }] = await prisma.user.findMany({
    where: {
      username: query.username,
    },
    select: {
      posts: {
        take: query.take,
        skip: query.skip,
        where: {
          published: true
        },
        select: {
          id: true,
          totalRating: true,
          title: true,
          content: true,
          published: true,
          publishedAt: true,
          lastEditedAt: true,
          author: {
            select: {
              id: true,
              username: true,
            }
          },
          _count: {
            select: { comments: true },
          },
        },
        orderBy: query.sort
      }
    }
  })
  return posts;
}

async function getCommentsByUsername(query) {
  const user = await prisma.user.findUnique({
    where: {
      username: query.username
    }
  })
  if (!user) {
    return null;
  }
  const [{ comments }] = await prisma.user.findMany({
    where: {
      username: query.username
    },
    select: {
      username: true,
      comments: {
        take: query.take,
        skip: query.skip,
        select: {
          id: true,
          totalRating: true,
          content: true,
          postedAt: true,
          lastEditedAt: true,
          author: {
            select: {
              id: true,
              username: true
            }
          },
          post: {
            select: {
              id: true,
              title: true,
            }
          },
        },
        orderBy: query.sort
      }
    }
  })
  return comments;
}

async function getDraftsByUsername(query) {
  const user = await prisma.user.findUnique({
    where: {
      username: query.username
    }
  })
  // if user by the given username is not found, return "null"
  if (!user) {
    return null;
  }
  const [drafts] = await prisma.user.findMany({
    where: {
      username: query.username,
    },
    select: {
      posts: {
        take: query.take,
        skip: query.skip,
        where: {
          published: false,
        },
        select: {
          id: true,
          totalRating: true,
          title: true,
          content: true,
          published: true,
          publishedAt: true,
          lastEditedAt: true,
          author: {
            select: {
              id: true,
              username: true,
            }
          },
          _count: {
            select: { comments: true },
          },
        },
        orderBy: query.sort
      }
    }
  })
  return drafts.posts;
}

async function getAllPosts(query) {
  const posts = await prisma.post.findMany({
    take: query.take,
    skip: query.skip,
    select: {
      id: true,
      totalRating: true,
      title: true,
      content: true,
      published: true,
      publishedAt: true,
      lastEditedAt: true,
      author: {
        select: {
          id: true,
          username: true,
        }
      },
      _count: {
        select: { comments: true },
      },
    },
    orderBy: query.sort
  });
  return posts;
}

async function getPostByPostId(query) {
  const post = await prisma.post.findUnique({
    where: {
      id: query.postId
    },
    select: {
      id: true,
      totalRating: true,
      title: true,
      content: true,
      published: true,
      publishedAt: true,
      lastEditedAt: true,
      author: {
        select: {
          id: true,
          username: true,
        }
      },
      comments: {
        select: {
          id: true,
          content: true,
          author: {
            select: {
              id: true,
              username: true
            }
          },
          postedAt: true,
          lastEditedAt: true,
        }
      },
    },
  })
  return post;
}

async function deletePost(query) {
  const post = await prisma.post.findUnique({
    where: {
      id: query.postId
    }
  })
  // return null if specified post does not exist
  if (!post) {
    return null;
  }
  await prisma.post.delete({
    where: {
      id: query.postId
    }
  });
  return "deleted";
}

async function getCommentsByPostId(query) {
  const comments = await prisma.comment.findMany({
    where: {
      postId: query.postId
    },
    select: {
      id: true,
      totalRating: true,
      content: true,
      author: {
        select: {
          id: true,
          username: true,
        }
      },
      postedAt: true,
      lastEditedAt: true
    }
  })
  return comments;
}

async function getCommentByCommentId(query) {
  const comment = await prisma.comment.findUnique({
    where: {
      id: query.commentId
    },
    select: {
      id: true,
      totalRating: true,
      content: true,
      author: {
        select: {
          id: true,
          username: true
        }
      },
      postedAt: true,
      lastEditedAt: true,
      postId: true,
    }
  })
  return comment;
}

async function deleteComment(query) {
  const comment = await prisma.comment.findUnique({
    where: {
      id: query.commentId
    },
    select: {
      authorId: true
    }
  })
  // if comment is not found, return "null"
  if (!comment) {
    return null;
  }
  await prisma.comment.delete({
    where: {
      id: query.commentId
    }
  });
  return "deleted";
}

module.exports = {
  getAllUsers,
  getUserByUsername,
  updateUser,
  deleteUser,
  getPostsByUsername,
  getCommentsByUsername,
  getDraftsByUsername,
  getAllPosts,
  getPostByPostId,
  deletePost,
  getCommentsByPostId,
  getCommentByCommentId,
  deleteComment,
}