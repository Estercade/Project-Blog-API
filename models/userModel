const { PrismaClient } = require("@prisma/client");
const prisma = new PrismaClient();

async function createUser(newUsername, newPassword, newEmail) {
  const user = await prisma.user.create({
    data: {
      username: newUsername,
      password: newPassword,
      email: newEmail,
    }
  });
  return user;
}

async function getAllUsers() {
  const users = await prisma.user.findMany();
  return users;
}

async function getUserByUsername(queryUsername) {
  const user = await prisma.user.findUnique({
    where: {
      username: queryUsername
    }
  });
  return user;
}

async function getUserById(queryUserId) {
  const user = await prisma.user.findUnique({
    where: {
      id: queryUserId
    }
  });
}

async function updateUser(queryUsername, newUsername, newPassword, newEmail) {
  const user = await prisma.user.update({
    where: {
      username: queryUsername,
    },
    data: {
      username: newUsername,
      password: newPassword,
      email: newEmail
    }
  });
  return user;
}

async function deleteUser(queryUserId) {
  await prisma.user.delete({
    where: {
      id: queryUserId
    }
  });
}

async function getPostsByUsername(queryUsername) {
  const [{ posts }] = await prisma.user.findMany({
    where: {
      username: queryUsername
    },
    select: {
      posts: true,
    }
  })
  return posts;
}

async function getCommentsByUsername(queryUsername) {
  const [{ comments }] = await prisma.user.findMany({
    where: {
      username: queryUsername
    },
    select: {
      comments: true,
    }
  })
  return comments;
}

module.exports = {
  createUser,
  getAllUsers,
  getUserByUsername,
  getUserById,
  updateUser,
  deleteUser,
  getPostsByUsername,
  getCommentsByUsername
}