const { PrismaClient } = require("@prisma/client");
const prisma = new PrismaClient();

async function createUser(query) {
  const match = await prisma.user.findUnique({
    where: {
      username: query.username,
    }
  });
  // return "taken" if username is already taken
  if (match) {
    return "taken";
  }
  const user = await prisma.user.create({
    data: {
      username: query.username,
      password: query.password,
      email: query.email,
      role: query.role
    },
    select: {
      username: true,
      email: true,
      role: true
    }
  });
  return user;
}

async function getAllUsers(query) {
  const users = await prisma.user.findMany({
    take: query.take,
    skip: query.skip,
    select: {
      username: true,
      _count: {
        select: { 
          posts: true,
          comments: true,
        }
      },
      role: true,
    },
    orderBy: query.sort
  });
  return users;
}

async function getUserByUsername(query) {
  const user = await prisma.user.findUnique({
    where: {
      username: query.username
    },
    select: {
      username: true,
      _count: {
        select: { 
          posts: true,
          comments: true,
        }
      },
      posts: {
        where: {
          published: true
        },
        select: {
          id: true,
          totalRating: true,
          title: true,
          content: true,
          publishedAt: true,
          lastEditedAt: true,
          author: {
            select: {
              username: true
            }
          },
          _count: {
            select: { comments: true },
          },
        }
      },
      comments: {
        select: {
          id: true,
          totalRating: true,
          content: true,
          postedAt: true,
          lastEditedAt: true,
          author: {
            select: {
              username: true
            }
          },
          post: {
            select: {
              id: true,
              title: true,
            }
          },
        }
      },
    }
  });
  return user;
}

async function updateUser(query) {
  // check if username is already taken
  const match = await prisma.user.findUnique({
    where: {
      username: query.username,
    }
  })
  // if user by the given username is not found, return "null"
  if (!match) {
    return null;
  }
    // return "forbidden" if current userId does not match the userId associated with the target user
    if (match && match.id !== query.userId) {
      return "taken";
    }
  // if username is being changed, check if the username is taken 
  if (query.newUsername && query.username !== query.newUsername) {
    const usernameCheck = await prisma.user.findUnique({
      where: {
        username: query.newUsername,
      }
    })
    if (usernameCheck) {
      return "taken";
    }
  }
  const user = await prisma.user.update({
    where: {
      username: query.username,
    },
    data: {
      username: query.username,
      password: query.password,
      email: query.email
    },
    select: {
      username: true,
      email: true,
      role: true
    }
  });
  return user;
}

async function deleteUser(query) {
  // retrieve target user
  const user = await prisma.user.findUnique({
    where: {
      username: query.username
    }
  });
  // return "forbidden" if target's userId and currentUserId do not match
  if (user.id !== query.userId) {
    return "forbidden"
  }
  await prisma.user.delete({
    where: {
      id: query.userId
    }
  });
}

async function getPostsByUsername(query) {
  const user = await prisma.user.findUnique({
    where: {
      username: query.username
    }
  })
  // if user by the given username is not found, return "null"
  if (!user) {
    return null;
  }
  const [{ posts }] = await prisma.user.findMany({
    where: {
      username: query.username
    },
    select: {
      posts: {
        where: {
          published: true
        },
        take: query.take,
        skip: query.skip,
        select: {
          id: true,
          totalRating: true,
          title: true,
          content: true,
          published: true,
          publishedAt: true,
          lastEditedAt: true,
          author: {
            select: {
              username: true,
            }
          },
          _count: {
            select: { comments: true },
          },
        },
        orderBy: query.sort
      }
    }
  })
  return posts;
}

async function getCommentsByUsername(query) {
  const user = await prisma.user.findUnique({
    where: {
      username: query.username
    }
  })
  // if user by the given username is not found, return "null"
  if (!user) {
    return null;
  }
  const [{ comments }] = await prisma.user.findMany({
    where: {
      username: query.username
    },
    select: {
      username: true,
      comments: {
        take: query.take,
        skip: query.skip,
        select: {
          id: true,
          totalRating: true,
          content: true,
          postedAt: true,
          lastEditedAt: true,
          author: {
            select: {
              username: true
            }
          },
          post: {
            select: {
              id: true,
              title: true,
            }
          },
        },
        orderBy: query.sort
      }
    }
  })
  return comments;
}

async function getDraftsByUsername(query) {
  // retrieve target user
  const user = await prisma.user.findUnique({
    where: {
      username: query.username
    }
  })
  // if user by the given username is not found, return "null"
  if (!user) {
    return null;
  }
  // if current userId does not match the userId associated 
  // with that username, return "forbidden" string
  if (user.id !== query.userId) {
    return "forbidden";
  }
  const [drafts] = await prisma.user.findMany({
    where: {
      username: query.username
    },
    select: {
      posts: {
        where: {
          published: false
        },
        take: query.take,
        skip: query.skip,
        select: {
          id: true,
          totalRating: true,
          title: true,
          content: true,
          published: true,
          createdAt: true,
          lastEditedAt: true,
          author: {
            select: {
              username: true,
            }
          },
          _count: {
            select: { comments: true },
          },
        },
        orderBy: query.sort
      }
    }
  })
  return drafts.posts;
}

module.exports = {
  createUser,
  getAllUsers,
  getUserByUsername,
  updateUser,
  deleteUser,
  getPostsByUsername,
  getCommentsByUsername,
  getDraftsByUsername
}