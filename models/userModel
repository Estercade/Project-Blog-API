const { PrismaClient } = require("@prisma/client");
const prisma = new PrismaClient();

async function createUser(query) {
  const user = await prisma.user.create({
    data: {
      username: query.username,
      password: query.password,
      email: query.email,
    },
    select: {
      username: true,
      email: true
    }
  });
  return user;
}

async function getAllUsers() {
  const users = await prisma.user.findMany({
    select: {
      username: true,
      posts: {
        where: {
          published: true
        }
      },
      comments: true
    }
  });
  return users;
}

async function getUserByUsername(targetUsername) {
  const user = await prisma.user.findUnique({
    where: {
      username: targetUsername
    },
    select: {
      username: true,
      posts: {
        where: {
          published: true
        },
        select: {
          id: true,
          title: true,
          content: true,
          publishedAt: true,
          author: {
            select: {
              username: true
            }
          },
          averageRating: true,
          _count: {
            select: { comments: true },
          },
        }
      },
      comments: {
        select: {
          id: true,
          content: true,
          posted: true,
          post: {
            select: {
              id: true,
              title: true
            }
          },
          author: {
            select: {
              username: true
            }
          },
        }
      },
    }
  });
  return user;
}

async function getUserById(targetUserId) {
  const user = await prisma.user.findUnique({
    where: {
      id: targetUserId
    },
    select: {
      username: true,
      email: true,
      posts: true,
      comments: true,
    }
  });
}

async function updateUser(query) {
  // check if username is already taken
  const tempUser = await prisma.user.findUnique({
    where: {
      username: query.username
    }
  })
  // if username is already taken and current userId does not match 
  // the userId associated with that username, return "taken" string
  if (tempUser && tempUser.id !== query.userId) {
    return "taken";
  }
  const user = await prisma.user.update({
    where: {
      username: targetUsername,
    },
    data: {
      username: query.username,
      password: query.password,
      email: query.email
    }
  });
  return user;
}

async function deleteUser(targetUserId) {
  await prisma.user.delete({
    where: {
      id: targetUserId
    }
  });
}

async function getPostsByUsername(query) {
  const [{ posts }] = await prisma.user.findMany({
    where: {
      username: query.username
    },
    select: {
      posts: {
        where: {
          published: true
        },
        orderBy: query.sort
      }
    }
  })
  return posts;
}

async function getCommentsByUsername(query) {
  const [{ comments }] = await prisma.user.findMany({
    where: {
      username: query.username
    },
    select: {
      username: true,
      comments: {
        orderBy: query.sort
      }
    }
  })
  return comments;
}

async function getDraftsByUsername(targetUsername, currentUserId) {
  // retrieve target user
  const user = await prisma.user.findUnique({
    where: {
      username: targetUsername
    }
  })
  // if current userId does not match the userId associated 
  // with that username, return "forbidden" string
  if (user.id !== currentUserId) {
    return "forbidden";
  }
  const [ drafts ] = await prisma.user.findMany({
    where: {
      username: targetUsername
    },
    select: {
      posts: {
        where: {
          published: !true
        }
      }
    }
  })
  return drafts;
}

module.exports = {
  createUser,
  getAllUsers,
  getUserByUsername,
  getUserById,
  updateUser,
  deleteUser,
  getPostsByUsername,
  getCommentsByUsername,
  getDraftsByUsername
}