const { PrismaClient } = require("@prisma/client");
const prisma = new PrismaClient();

async function getCommentByCommentId(query) {
  const comment = await prisma.comment.findUnique({
    where: {
      id: query.commentId
    },
    select: {
      id: true,
      totalRating: true,
      content: true,
      author: {
        select: {
          username: true
        }
      },
      postedAt: true,
      lastEditedAt: true,
      postId: true,
    }
  })
  return comment;
}

async function updateComment(query) {
  const comment = await prisma.comment.findUnique({
    where: {
      id: query.commentId,
    }
  });
  if (!comment) return null;
  const updatedComment = await prisma.comment.update({
    where: {
      id: query.commentId,
    },
    data: {
      content: query.content,
      lastEditedAt: new Date()
    },
    select: {
      id: true,
      totalRating: true,
      content: true,
      author: {
        select: {
          username: true
        }
      },
      postedAt: true,
      lastEditedAt: true,
      postId: true,
    }
  })
  return updatedComment;
}

async function deleteComment(query) {
  const comment = await prisma.comment.findUnique({
    where: {
      id: query.commentId
    },
    select: {
      authorId: true
    }
  })
  // if comment is not found, return "null"
  if (!comment) {
    return null;
  }

  // database query will return "forbidden" if author id does not match current user's id
  if (comment.authorId !== query.userId) {
    return "forbidden";
  }
  await prisma.comment.delete({
    where: {
      id: query.commentId
    }
  });
  return "deleted";
}

async function rateComment(query) {
  // search to see if comment exists
  let comment = await prisma.comment.findUnique({
    where: {
      id: query.commentId,
    }
  });
  // return null if specified comment does not exist
  if (!comment) {
    return null;
  }
  // search if the user has previously rated this comment
  const match = await prisma.rating.findMany({
    where: {
      userId: query.userId,
      commentId: query.commentId
    }
  })
  // if user has never rated this comment, create a new rating
  if (match.length < 1) {
    const rating = prisma.rating.create({
      data: {
        userId: query.userId,
        commentId: query.commentId,
        rating: query.rating,
      }
    })
    return rating;
    // if user has previously rated this comment, update the given rating
  } else {
    const rating = await prisma.rating.update({
      where: {
        id: match[0].id,
      },
      data: {
        rating: query.rating,
      }
    })
    return rating;
  }
}

async function updateCommentRating(query) {
  // retrieve the comment
  const comment = await prisma.comment.findUnique({
    where: {
      id: query.commentId,
    },
    select: {
      ratings: true,
    }
  })
  // iterate through and sum the ratings
  const newTotalRating = comment.ratings.reduce((sum, { rating }) => sum + rating, 0);
  // update the comment's totalRating
  const updatedPost = await prisma.comment.update({
    where: {
      id: query.commentId,
    },
    data: {
      totalRating: newTotalRating,
    },
    select: {
      id: true,
      totalRating: true,
      content: true,
      author: {
        select: {
          username: true
        }
      },
      postedAt: true,
      lastEditedAt: true,
      postId: true,
    }
  })
  return updatedPost;
}

module.exports = {
  getCommentByCommentId,
  updateComment,
  deleteComment,
  rateComment,
  updateCommentRating
}