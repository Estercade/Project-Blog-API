const { PrismaClient } = require("@prisma/client");
const prisma = new PrismaClient();

async function createComment(query) {
  const comment = await prisma.comment.create({
    data: {
      content: query.content,
      authorId: query.authorId,
      postId: query.postId
    }
  })
  return comment;
}

async function getCommentsByPostId(query) {
  const comments = await prisma.comment.findMany({
    where: {
      postId: query.postId
    }
  })
  return comments;
}

async function getCommentsByCommentId(query) {
  const comment = await prisma.comment.findUnique({
    where: {
      id: query.commentId
    }
  })
  return comment;
}

async function getCommentsByUser(queryUserId) {
  const comments = await prisma.comment.findMany({
    where: {
      authorId: queryUserId
    }
  })
  return comments;
}

async function updateComment(query) {
  const comment = await prisma.comment.findUnique({
    where: {
      id: query.commentId,
    }
  });
  if (!comment) return null;
  const updatedComment = await prisma.comment.update({
    where: {
      id: query.commentId,
    },
    data: {
      content: query.content,
      lastEdited: new Date()
    }
  })
  return commupdatedCommentent;
}

async function deleteComment(query) {
  const comment = await prisma.comment.findUnique({
    where: {
      id: query.commentId
    },
    select: {
      authorId: true
    }
  })
  // if comment is not found, return "null"
  if (!comment) {
    return null;
  }

  // database query will return "forbidden" if author id does not match current user's id
  if (comment.authorId !== query.userId) {
    return "forbidden";
  }
  await prisma.comment.delete({
    where: {
      id: query.commentId
    }
  });
  return "deleted";
}

module.exports = {
  createComment,
  getCommentsByCommentId,
  getCommentsByPostId,
  getCommentsByUser,
  updateComment,
  deleteComment
}