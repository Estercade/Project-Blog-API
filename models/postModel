const { PrismaClient } = require("@prisma/client");
const prisma = new PrismaClient();

async function getAllPosts(query) {
  const posts = await prisma.post.findMany({
    where: {
      published: true,
    },
    select: {
      id: true,
      title: true,
      content: true,
      published: true,
      publishedAt: true,
      lastEdited: true,
      author: {
        select: {
          username: true,
        }
      },
      averageRating: true,
      _count: {
        select: { comments: true },
      },
    },
    orderBy: query.sort
  });
  return posts;
}

async function getPostByPostId(query) {
  const post = await prisma.post.findUnique({
    where: {
      id: query.postId
    },
    select: {
      id: true,
      title: true,
      content: true,
      published: true,
      publishedAt: true,
      lastEdited: true,
      author: {
        select: {
          username: true,
        }
      },
      averageRating: true,
      ratingCount: true,
      comments: {
        select: {
          id: true,
          content: true,
          author: {
            select: {
              username: true
            }
          },
          posted: true,
          lastEdited: true,
        }
      },
    },
  })
  // if post is a draft, compare current user's id to authorId
  if (post && !post.published) {
    const { authorId } = await prisma.post.findUnique({
      where: {
        id: query.postId
      },
      select: {
        authorId: true
      }
    })
    // return "forbidden" if author id does not match current user's id
    if (authorId !== query.postId) {
      return "forbidden";
    }
  }
  return post;
}

async function createPost(query) {
  const post = await prisma.post.create({
    data: {
      title: query.title,
      content: query.content,
      authorId: query.authorId,
      published: query.published,
      publishedAt: query.publishedAt
    },
    select: {
      id: true,
      title: true,
      content: true,
      published: true,
      publishedAt: true,
      lastEdited: true,
      author: {
        select: {
          username: true,
        }
      },
      averageRating: true,
      ratingCount: true,
      comments: {
        select: {
          content: true,
          author: {
            select: {
              username: true
            }
          }
        }
      },
    },
  })
  return post;
}

async function updatePost(query) {
  const { authorId } = await prisma.post.findUnique({
    where: {
      id: query.postId
    },
    select: {
      authorId: true
    }
  })
  // return "forbidden" if author id does not match current user's id
  if (authorId !== query.userId) {
    return "forbidden";
  }
  let updatedPost = await prisma.post.update({
    where: {
      id: query.postId,
    },
    data: {
      title: query.title,
      content: query.content,
      lastEdited: new Date()
    },
    select: {
      id: true,
      title: true,
      content: true,
      published: true,
      publishedAt: true,
      lastEdited: true,
      author: {
        select: {
          username: true,
        }
      },
      averageRating: true,
      _count: {
        select: { comments: true },
      },
    }
  });
  if (updatedPost.published === false && query.published === true) {
    updatedPost = await prisma.post.update({
      where: {
        id: query.postId
      },
      data: {
        lastEdited: null,
        published: true,
        publishedAt: new Date(),
      },
      select: {
        id: true,
        title: true,
        content: true,
        published: true,
        publishedAt: true,
        lastEdited: true,
        author: {
          select: {
            username: true,
          }
        },
        averageRating: true,
        _count: {
          select: { comments: true },
        },
      }
    })
  }
  return updatedPost;
}

async function deletePost(query) {
  const post = await prisma.post.findUnique({
    where: {
      id: query.postId
    },
    select: {
      authorId: true
    }
  })
  // return null if specified post does not exist
  if (!post) {
    return null;
  }
  // return "forbidden" if author id does not match current user's id
  if (post.authorId !== query.userId) {
    return "forbidden";
  }
  await prisma.post.delete({
    where: {
      id: query.postId
    }
  });
  return "deleted";
}

async function ratePost(query) {
  let post = await getPostByPostId(query.postId);
  // return null if specified post does not exist
  if (!post) {
    return null;
  }
  const updatedPost = await prisma.post.update({
    where: {
      id: query.postId
    },
    data: {
      totalRating: { increment: query.rating },
      ratingCount: { increment: 1 },
      averageRating: ((post.totalRating + query.rating) / (post.ratingCount + 1))
    }
  })
  return updatedPost;
}

async function getCommentsByPostId(query) {
  let { comments } = await prisma.post.findUnique({
    where: {
      id: query.postId
    },
    select: {
      comments: {
        select: {
          id: true,
          content: true,
          author: {
            select: {
              username: true,
            }
          },
          posted: true,
          lastEdited: true
        }
      }
    }
  })
  return comments;
}

async function createCommentByPostId(query) {
  const comment = await prisma.comment.create({
    data: {
      content: query.content,
      authorId: query.authorId,
      postId: query.postId
    },
    select: {
      id: true,
      content: true,
      author: {
        select: {
          username: true
        }
      },
      posted: true,
      lastEdited: true,
      postId: true,
    }
  })
  return comment;
}

module.exports = {
  getAllPosts,
  getPostByPostId,
  createPost,
  updatePost,
  deletePost,
  ratePost,
  getCommentsByPostId,
  createCommentByPostId
}