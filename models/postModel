const { PrismaClient } = require("@prisma/client");
const prisma = new PrismaClient();

async function getAllPosts(order) {
  const posts = await prisma.post.findMany({
    where: {
      published: true,
    },
    select: {
      id: true,
      title: true,
      content: true,
      publishedAt: true,
      author: {
        select: {
          username: true,
        }
      },
      averageRating: true,
      _count: {
        select: { comments: true },
      },
    },
    orderBy: order
  });
  return posts;
}

async function getPostByPostId(targetPostId, currentUserId) {
  const post = await prisma.post.findUnique({
    where: {
      id: targetPostId
    },
    select: {
      id: true,
      title: true,
      content: true,
      published: true,
      publishedAt: true,
      author: {
        select: {
          username: true,
        }
      },
      averageRating: true,
      ratingCount: true,
      comments: {
        select: {
          id: true,
          content: true,
          author: {
            select: {
              username: true
            }
          },
          posted: true
        }
      },
    },
  })
  if (post.published !== true) {
    const { authorId } = await prisma.post.findUnique({
      where: {
        id: targetPostId
      },
      select: {
        authorId: true
      }
    })
    // database query will return null if author id does not match current user's id
    if (authorId !== currentUserId) {
      return null;
    }
  }
  return post;
}

async function getPostsByUserId(queryUserId) {
  const posts = await prisma.post.findMany({
    where: {
      authorId: queryUserId
    }
  })
  return posts;
}

async function createPost(query) {
  const post = await prisma.post.create({
    data: {
      title: query.title,
      content: query.content,
      authorId: query.authorId,
      published: query.published,
      publishedAt: query.publishedAt
    },
    select: {
      id: true,
      title: true,
      content: true,
      publishedAt: true,
      author: {
        select: {
          username: true,
        }
      },
      averageRating: true,
      ratingCount: true,
      comments: {
        select: {
          content: true,
          author: {
            select: {
              username: true
            }
          }
        }
      },
    },
  })
  return post;
}

async function updatePost(targetPostId, query) {
  const post = await prisma.post.update({
    where: {
      id: targetPostId,
    },
    data: {
      title: query.title,
      content: query.content,
      lastEdited: new Date()
    }
  });
  if (post.published === false && query.publishedState === true) {
    const updatedPost = await prisma.post.update({
      where: {
        id: targetPostId
      },
      data: {
        lastEdited: null,
        published: true,
        publishedAt: new Date(),
      }
    })
    return updatedPost;
  }
  return post;
}

async function deletePost(targetPostId) {
  await prisma.post.delete({
    where: {
      id: targetPostId
    }
  });
}

async function publishPost(targetPostId) {
  const post = await prisma.post.update({
    where: {
      id: targetPostId
    },
    data: {
      published: true,
      publishedAt: new Date(),
    }
  })
  return post;
}

async function ratePost(targetPostId, updatedRating) {
  let post = await getPostByPostId(targetPostId);
  const updatedPost = await prisma.post.update({
    where: {
      id: targetPostId
    },
    data: {
      totalRating: { increment: updatedRating },
      ratingCount: { increment: 1 },
      averageRating: ((post.totalRating + updatedRating) / (post.ratingCount + 1))
    }
  })
  return updatedPost;
}

async function getCommentsByPostId(targetPostId) {
  let { comments } = await prisma.post.findUnique({
    where: {
      id: targetPostId
    },
    select: {
      comments: {
        select: {
          username: true,
        }
      }
    }
  })
  return comments;
}

async function createComment(targetPostId, query) {
  const comment = await prisma.comment.create({
    data: {
      content: query.content,
      authorId: query.authorId,
      postId: targetPostId
    }
  })
  return comment;
}

module.exports = {
  getAllPosts,
  getPostByPostId,
  getPostsByUserId,
  createPost,
  updatePost,
  deletePost,
  publishPost,
  ratePost,
  getCommentsByPostId,
  createComment
}