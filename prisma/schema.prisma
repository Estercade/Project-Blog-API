// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id       String    @id @unique @default(uuid())
  username String    @unique
  password String
  email    String
  role     Role      @default(USER)
  posts    Post[]
  comments Comment[]
  rating   Rating[]
}

model Post {
  id           String    @id @unique @default(uuid())
  totalRating  Int       @default(0)
  ratings      Rating[]
  title        String
  content      String
  createdAt    DateTime  @default(now())
  published    Boolean   @default(false)
  publishedAt  DateTime?
  lastEditedAt DateTime?
  author       User      @relation(fields: [authorId], references: [id])
  authorId     String
  comments     Comment[]
}

model Comment {
  id           String    @id @unique @default(uuid())
  totalRating  Int       @default(0)
  ratings      Rating[]
  content      String
  author       User      @relation(fields: [authorId], references: [id])
  authorId     String
  postedAt     DateTime  @default(now())
  lastEditedAt DateTime?
  post         Post      @relation(fields: [postId], references: [id])
  postId       String
}

model Rating {
  id        String   @id @unique @default(uuid())
  rating    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?
}

enum Role {
  USER
  ADMIN
}
